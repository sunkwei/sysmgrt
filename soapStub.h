/* soapStub.h
   Generated by gSOAP 2.8.17r from zonekey_sysmgrt.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (7)
/* xsd:boolean */
enum xsd__boolean { xsd__boolean__false_ = 0, xsd__boolean__true_ = 1 };
#endif

#ifndef SOAP_TYPE_zkreg__Catalog
#define SOAP_TYPE_zkreg__Catalog (11)
/* zkreg:Catalog */
enum zkreg__Catalog { zkreg__Catalog__Host = 0, zkreg__Catalog__Service = 1, zkreg__Catalog__Device = 2, zkreg__Catalog__Logic = 3 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_zkreg__Ips
#define SOAP_TYPE_zkreg__Ips (12)
/* Sequence of zkreg:Ips schema type: */
struct zkreg__Ips
{
	char **__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_zkreg__Urls
#define SOAP_TYPE_zkreg__Urls (14)
/* Sequence of zkreg:Urls schema type: */
struct zkreg__Urls
{
	char **__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_zkreg__Mse
#define SOAP_TYPE_zkreg__Mse (16)
/* zkreg:Mse */
struct zkreg__Mse
{
	char *name;	/* required element of type xsd:string */
	enum zkreg__Catalog catalog;	/* required element of type zkreg:Catalog */
	char *parent;	/* optional element of type xsd:string */
	char *showname;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__Mses
#define SOAP_TYPE_zkreg__Mses (17)
/* Sequence of zkreg:Mses schema type: */
struct zkreg__Mses
{
	struct zkreg__Mse *__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_zkreg__Host
#define SOAP_TYPE_zkreg__Host (19)
/* zkreg:Host */
struct zkreg__Host
{
	char *name;	/* required element of type xsd:string */
	enum zkreg__Catalog catalog;	/* required element of type zkreg:Catalog */
	struct zkreg__Ips *ips;	/* required element of type zkreg:Ips */
	char *showname;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__Hosts
#define SOAP_TYPE_zkreg__Hosts (21)
/* Sequence of zkreg:Hosts schema type: */
struct zkreg__Hosts
{
	struct zkreg__Host *__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_zkreg__Service
#define SOAP_TYPE_zkreg__Service (23)
/* zkreg:Service */
struct zkreg__Service
{
	char *name;	/* required element of type xsd:string */
	enum zkreg__Catalog catalog;	/* required element of type zkreg:Catalog */
	char *hostname;	/* required element of type xsd:string */
	char *type;	/* required element of type xsd:string */
	struct zkreg__Urls *urls;	/* required element of type zkreg:Urls */
	char *version;	/* optional element of type xsd:string */
	char *showname;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__Services
#define SOAP_TYPE_zkreg__Services (25)
/* Sequence of zkreg:Services schema type: */
struct zkreg__Services
{
	struct zkreg__Service *__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_zkreg__Device
#define SOAP_TYPE_zkreg__Device (27)
/* zkreg:Device */
struct zkreg__Device
{
	char *name;	/* required element of type xsd:string */
	enum zkreg__Catalog catalog;	/* required element of type zkreg:Catalog */
	char *hostname;	/* required element of type xsd:string */
	char *type;	/* required element of type xsd:string */
	char *vendor;	/* optional element of type xsd:string */
	char *model;	/* optional element of type xsd:string */
	char *serial;	/* optional element of type xsd:string */
	char *version;	/* optional element of type xsd:string */
	char *showname;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__Devices
#define SOAP_TYPE_zkreg__Devices (28)
/* Sequence of zkreg:Devices schema type: */
struct zkreg__Devices
{
	struct zkreg__Device *__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_zkreg__Logic
#define SOAP_TYPE_zkreg__Logic (30)
/* zkreg:Logic */
struct zkreg__Logic
{
	char *name;	/* required element of type xsd:string */
	enum zkreg__Catalog catalog;	/* required element of type zkreg:Catalog */
	struct zkreg__Mse *parent;	/* optional element of type zkreg:Mse */
	struct zkreg__Mses *children;	/* optional element of type zkreg:Mses */
	char *showname;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__Logics
#define SOAP_TYPE_zkreg__Logics (32)
/* Sequence of zkreg:Logics schema type: */
struct zkreg__Logics
{
	struct zkreg__Logic *__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_zkreg__regHostResponse
#define SOAP_TYPE_zkreg__regHostResponse (35)
/* zkreg:regHostResponse */
struct zkreg__regHostResponse
{
	char **token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__regHost
#define SOAP_TYPE_zkreg__regHost (36)
/* zkreg:regHost */
struct zkreg__regHost
{
	struct zkreg__Host *zkreg__regHostReq;	/* optional element of type zkreg:Host */
};
#endif

#ifndef SOAP_TYPE_zkreg__unregHostResponse
#define SOAP_TYPE_zkreg__unregHostResponse (39)
/* zkreg:unregHostResponse */
struct zkreg__unregHostResponse
{
	int *code;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_zkreg__unregHost
#define SOAP_TYPE_zkreg__unregHost (40)
/* zkreg:unregHost */
struct zkreg__unregHost
{
	char *zkreg__unRegHoststring;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__regServiceResponse
#define SOAP_TYPE_zkreg__regServiceResponse (42)
/* zkreg:regServiceResponse */
struct zkreg__regServiceResponse
{
	char **token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__regService
#define SOAP_TYPE_zkreg__regService (43)
/* zkreg:regService */
struct zkreg__regService
{
	struct zkreg__Service *zkreg__regServiceReq;	/* optional element of type zkreg:Service */
};
#endif

#ifndef SOAP_TYPE_zkreg__unregServiceResponse
#define SOAP_TYPE_zkreg__unregServiceResponse (45)
/* zkreg:unregServiceResponse */
struct zkreg__unregServiceResponse
{
	int *code;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_zkreg__unregService
#define SOAP_TYPE_zkreg__unregService (46)
/* zkreg:unregService */
struct zkreg__unregService
{
	char *zkreg__unregServicestring;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__regDeviceResponse
#define SOAP_TYPE_zkreg__regDeviceResponse (48)
/* zkreg:regDeviceResponse */
struct zkreg__regDeviceResponse
{
	char **token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__regDevice
#define SOAP_TYPE_zkreg__regDevice (49)
/* zkreg:regDevice */
struct zkreg__regDevice
{
	struct zkreg__Device *zkreg__regDeviceReq;	/* optional element of type zkreg:Device */
};
#endif

#ifndef SOAP_TYPE_zkreg__unregDeviceResponse
#define SOAP_TYPE_zkreg__unregDeviceResponse (51)
/* zkreg:unregDeviceResponse */
struct zkreg__unregDeviceResponse
{
	int *code;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_zkreg__unregDevice
#define SOAP_TYPE_zkreg__unregDevice (52)
/* zkreg:unregDevice */
struct zkreg__unregDevice
{
	char *zkreg__unregDevciestring;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__regLogicResponse
#define SOAP_TYPE_zkreg__regLogicResponse (54)
/* zkreg:regLogicResponse */
struct zkreg__regLogicResponse
{
	char **token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__regLogic
#define SOAP_TYPE_zkreg__regLogic (55)
/* zkreg:regLogic */
struct zkreg__regLogic
{
	struct zkreg__Logic *zkreg__regLogicReq;	/* optional element of type zkreg:Logic */
};
#endif

#ifndef SOAP_TYPE_zkreg__delMseResponse
#define SOAP_TYPE_zkreg__delMseResponse (57)
/* zkreg:delMseResponse */
struct zkreg__delMseResponse
{
	int *code;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_zkreg__delMse
#define SOAP_TYPE_zkreg__delMse (58)
/* zkreg:delMse */
struct zkreg__delMse
{
	char *zkreg__delMseNameReq;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__heartBeatResponse
#define SOAP_TYPE_zkreg__heartBeatResponse (60)
/* zkreg:heartBeatResponse */
struct zkreg__heartBeatResponse
{
	int *code;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_zkreg__heartBeat
#define SOAP_TYPE_zkreg__heartBeat (61)
/* zkreg:heartBeat */
struct zkreg__heartBeat
{
	char *zkreg__heartBeatTokenReq;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkreg__setShowNameResponse
#define SOAP_TYPE_zkreg__setShowNameResponse (63)
/* zkreg:setShowNameResponse */
struct zkreg__setShowNameResponse
{
	int *code;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_zkreg__setShowName
#define SOAP_TYPE_zkreg__setShowName (64)
/* zkreg:setShowName */
struct zkreg__setShowName
{
	char *zkreg__setShowNameReq;	/* optional element of type xsd:string */
	char *showname;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkq__getAllMsesResponse
#define SOAP_TYPE_zkq__getAllMsesResponse (66)
/* zkq:getAllMsesResponse */
struct zkq__getAllMsesResponse
{
	struct zkreg__Mses *mses;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type zkreg:Mses */
};
#endif

#ifndef SOAP_TYPE_zkq__getAllMses
#define SOAP_TYPE_zkq__getAllMses (67)
/* zkq:getAllMses */
struct zkq__getAllMses
{
	enum xsd__boolean zkq__getAllMsesoffline;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_zkq__getMsesByShownameResponse
#define SOAP_TYPE_zkq__getMsesByShownameResponse (69)
/* zkq:getMsesByShownameResponse */
struct zkq__getMsesByShownameResponse
{
	struct zkreg__Mses *mses;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type zkreg:Mses */
};
#endif

#ifndef SOAP_TYPE_zkq__getMsesByShowname
#define SOAP_TYPE_zkq__getMsesByShowname (70)
/* zkq:getMsesByShowname */
struct zkq__getMsesByShowname
{
	enum xsd__boolean zkq__getMsesByShownameOffline;	/* required element of type xsd:boolean */
	char *showname;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkq__getAllHostsResponse
#define SOAP_TYPE_zkq__getAllHostsResponse (73)
/* zkq:getAllHostsResponse */
struct zkq__getAllHostsResponse
{
	struct zkreg__Hosts *hosts;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type zkreg:Hosts */
};
#endif

#ifndef SOAP_TYPE_zkq__getAllHosts
#define SOAP_TYPE_zkq__getAllHosts (74)
/* zkq:getAllHosts */
struct zkq__getAllHosts
{
	enum xsd__boolean zkq__getAllHostsoffline;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_zkq__getAllServicesResponse
#define SOAP_TYPE_zkq__getAllServicesResponse (77)
/* zkq:getAllServicesResponse */
struct zkq__getAllServicesResponse
{
	struct zkreg__Services *services;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type zkreg:Services */
};
#endif

#ifndef SOAP_TYPE_zkq__getAllServices
#define SOAP_TYPE_zkq__getAllServices (78)
/* zkq:getAllServices */
struct zkq__getAllServices
{
	enum xsd__boolean zkq__getAllServiceoffline;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_zkq__getAllDevicesResponse
#define SOAP_TYPE_zkq__getAllDevicesResponse (81)
/* zkq:getAllDevicesResponse */
struct zkq__getAllDevicesResponse
{
	struct zkreg__Devices *devices;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type zkreg:Devices */
};
#endif

#ifndef SOAP_TYPE_zkq__getAllDevices
#define SOAP_TYPE_zkq__getAllDevices (82)
/* zkq:getAllDevices */
struct zkq__getAllDevices
{
	enum xsd__boolean zkq__getAllDevicesoffline;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_zkq__getAllLogicsResponse
#define SOAP_TYPE_zkq__getAllLogicsResponse (85)
/* zkq:getAllLogicsResponse */
struct zkq__getAllLogicsResponse
{
	struct zkreg__Logics *logics;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type zkreg:Logics */
};
#endif

#ifndef SOAP_TYPE_zkq__getAllLogics
#define SOAP_TYPE_zkq__getAllLogics (86)
/* zkq:getAllLogics */
struct zkq__getAllLogics
{
	enum xsd__boolean zkq__getAllLogicsoffline;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_zkq__getServicesByTypeResponse
#define SOAP_TYPE_zkq__getServicesByTypeResponse (88)
/* zkq:getServicesByTypeResponse */
struct zkq__getServicesByTypeResponse
{
	struct zkreg__Services *services;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type zkreg:Services */
};
#endif

#ifndef SOAP_TYPE_zkq__getServicesByType
#define SOAP_TYPE_zkq__getServicesByType (89)
/* zkq:getServicesByType */
struct zkq__getServicesByType
{
	enum xsd__boolean zkq__getServiceByTypeoffline;	/* required element of type xsd:boolean */
	char *type;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkq__getParentResponse
#define SOAP_TYPE_zkq__getParentResponse (92)
/* zkq:getParentResponse */
struct zkq__getParentResponse
{
	struct zkreg__Logic **logic;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type zkreg:Logic */
};
#endif

#ifndef SOAP_TYPE_zkq__getParent
#define SOAP_TYPE_zkq__getParent (93)
/* zkq:getParent */
struct zkq__getParent
{
	char *zkq__getParentName;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkcfg__Keys
#define SOAP_TYPE_zkcfg__Keys (94)
/* Sequence of zkcfg:Keys schema type: */
struct zkcfg__Keys
{
	char **__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_zkcfg__Ret
#define SOAP_TYPE_zkcfg__Ret (95)
/* zkcfg:Ret */
struct zkcfg__Ret
{
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	char *value;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkcfg__getAllKeysResponse
#define SOAP_TYPE_zkcfg__getAllKeysResponse (100)
/* zkcfg:getAllKeysResponse */
struct zkcfg__getAllKeysResponse
{
	struct zkcfg__Keys *zkcfg__KeysRes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type zkcfg:Keys */
};
#endif

#ifndef SOAP_TYPE_zkcfg__getAllKeys
#define SOAP_TYPE_zkcfg__getAllKeys (101)
/* zkcfg:getAllKeys */
struct zkcfg__getAllKeys
{
	void *notuse;	/* transient */
};
#endif

#ifndef SOAP_TYPE_zkcfg__getValue
#define SOAP_TYPE_zkcfg__getValue (104)
/* zkcfg:getValue */
struct zkcfg__getValue
{
	char *zkcfg__getValueKeyRequest;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkcfg__setValue
#define SOAP_TYPE_zkcfg__setValue (106)
/* zkcfg:setValue */
struct zkcfg__setValue
{
	char *zkcfg__setValueKeyRequest;	/* optional element of type xsd:string */
	char *value;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_zkcfg__delKey
#define SOAP_TYPE_zkcfg__delKey (108)
/* zkcfg:delKey */
struct zkcfg__delKey
{
	char *zkcfg__delKeyRequest;	/* optional element of type xsd:string */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (109)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (110)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (112)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (113)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (114)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (8)
typedef char *xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (9)
typedef char *xsd__integer;
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (10)
typedef char *xsd__string;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 zkreg__regHost(struct soap*, struct zkreg__Host *zkreg__regHostReq, char **token);

SOAP_FMAC5 int SOAP_FMAC6 zkreg__unregHost(struct soap*, char *zkreg__unRegHoststring, int *code);

SOAP_FMAC5 int SOAP_FMAC6 zkreg__regService(struct soap*, struct zkreg__Service *zkreg__regServiceReq, char **token);

SOAP_FMAC5 int SOAP_FMAC6 zkreg__unregService(struct soap*, char *zkreg__unregServicestring, int *code);

SOAP_FMAC5 int SOAP_FMAC6 zkreg__regDevice(struct soap*, struct zkreg__Device *zkreg__regDeviceReq, char **token);

SOAP_FMAC5 int SOAP_FMAC6 zkreg__unregDevice(struct soap*, char *zkreg__unregDevciestring, int *code);

SOAP_FMAC5 int SOAP_FMAC6 zkreg__regLogic(struct soap*, struct zkreg__Logic *zkreg__regLogicReq, char **token);

SOAP_FMAC5 int SOAP_FMAC6 zkreg__delMse(struct soap*, char *zkreg__delMseNameReq, int *code);

SOAP_FMAC5 int SOAP_FMAC6 zkreg__heartBeat(struct soap*, char *zkreg__heartBeatTokenReq, int *code);

SOAP_FMAC5 int SOAP_FMAC6 zkreg__setShowName(struct soap*, char *zkreg__setShowNameReq, char *showname, int *code);

SOAP_FMAC5 int SOAP_FMAC6 zkq__getAllMses(struct soap*, enum xsd__boolean zkq__getAllMsesoffline, struct zkreg__Mses *mses);

SOAP_FMAC5 int SOAP_FMAC6 zkq__getMsesByShowname(struct soap*, enum xsd__boolean zkq__getMsesByShownameOffline, char *showname, struct zkreg__Mses *mses);

SOAP_FMAC5 int SOAP_FMAC6 zkq__getAllHosts(struct soap*, enum xsd__boolean zkq__getAllHostsoffline, struct zkreg__Hosts *hosts);

SOAP_FMAC5 int SOAP_FMAC6 zkq__getAllServices(struct soap*, enum xsd__boolean zkq__getAllServiceoffline, struct zkreg__Services *services);

SOAP_FMAC5 int SOAP_FMAC6 zkq__getAllDevices(struct soap*, enum xsd__boolean zkq__getAllDevicesoffline, struct zkreg__Devices *devices);

SOAP_FMAC5 int SOAP_FMAC6 zkq__getAllLogics(struct soap*, enum xsd__boolean zkq__getAllLogicsoffline, struct zkreg__Logics *logics);

SOAP_FMAC5 int SOAP_FMAC6 zkq__getServicesByType(struct soap*, enum xsd__boolean zkq__getServiceByTypeoffline, char *type, struct zkreg__Services *services);

SOAP_FMAC5 int SOAP_FMAC6 zkq__getParent(struct soap*, char *zkq__getParentName, struct zkreg__Logic **logic);

SOAP_FMAC5 int SOAP_FMAC6 zkcfg__getAllKeys(struct soap*, void *notuse, struct zkcfg__Keys *zkcfg__KeysRes);

SOAP_FMAC5 int SOAP_FMAC6 zkcfg__getValue(struct soap*, char *zkcfg__getValueKeyRequest, struct zkcfg__Ret *zkcfg__RetRes);

SOAP_FMAC5 int SOAP_FMAC6 zkcfg__setValue(struct soap*, char *zkcfg__setValueKeyRequest, char *value, struct zkcfg__Ret *zkcfg__RetRes);

SOAP_FMAC5 int SOAP_FMAC6 zkcfg__delKey(struct soap*, char *zkcfg__delKeyRequest, struct zkcfg__Ret *zkcfg__RetRes);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkreg__regHost(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkreg__unregHost(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkreg__regService(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkreg__unregService(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkreg__regDevice(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkreg__unregDevice(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkreg__regLogic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkreg__delMse(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkreg__heartBeat(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkreg__setShowName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkq__getAllMses(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkq__getMsesByShowname(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkq__getAllHosts(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkq__getAllServices(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkq__getAllDevices(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkq__getAllLogics(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkq__getServicesByType(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkq__getParent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkcfg__getAllKeys(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkcfg__getValue(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkcfg__setValue(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkcfg__delKey(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkreg__regHost(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct zkreg__Host *zkreg__regHostReq, char **token);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkreg__unregHost(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *zkreg__unRegHoststring, int *code);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkreg__regService(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct zkreg__Service *zkreg__regServiceReq, char **token);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkreg__unregService(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *zkreg__unregServicestring, int *code);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkreg__regDevice(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct zkreg__Device *zkreg__regDeviceReq, char **token);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkreg__unregDevice(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *zkreg__unregDevciestring, int *code);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkreg__regLogic(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct zkreg__Logic *zkreg__regLogicReq, char **token);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkreg__delMse(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *zkreg__delMseNameReq, int *code);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkreg__heartBeat(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *zkreg__heartBeatTokenReq, int *code);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkreg__setShowName(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *zkreg__setShowNameReq, char *showname, int *code);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkq__getAllMses(struct soap *soap, const char *soap_endpoint, const char *soap_action, enum xsd__boolean zkq__getAllMsesoffline, struct zkreg__Mses *mses);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkq__getMsesByShowname(struct soap *soap, const char *soap_endpoint, const char *soap_action, enum xsd__boolean zkq__getMsesByShownameOffline, char *showname, struct zkreg__Mses *mses);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkq__getAllHosts(struct soap *soap, const char *soap_endpoint, const char *soap_action, enum xsd__boolean zkq__getAllHostsoffline, struct zkreg__Hosts *hosts);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkq__getAllServices(struct soap *soap, const char *soap_endpoint, const char *soap_action, enum xsd__boolean zkq__getAllServiceoffline, struct zkreg__Services *services);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkq__getAllDevices(struct soap *soap, const char *soap_endpoint, const char *soap_action, enum xsd__boolean zkq__getAllDevicesoffline, struct zkreg__Devices *devices);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkq__getAllLogics(struct soap *soap, const char *soap_endpoint, const char *soap_action, enum xsd__boolean zkq__getAllLogicsoffline, struct zkreg__Logics *logics);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkq__getServicesByType(struct soap *soap, const char *soap_endpoint, const char *soap_action, enum xsd__boolean zkq__getServiceByTypeoffline, char *type, struct zkreg__Services *services);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkq__getParent(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *zkq__getParentName, struct zkreg__Logic **logic);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkcfg__getAllKeys(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *notuse, struct zkcfg__Keys *zkcfg__KeysRes);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkcfg__getValue(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *zkcfg__getValueKeyRequest, struct zkcfg__Ret *zkcfg__RetRes);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkcfg__setValue(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *zkcfg__setValueKeyRequest, char *value, struct zkcfg__Ret *zkcfg__RetRes);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkcfg__delKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *zkcfg__delKeyRequest, struct zkcfg__Ret *zkcfg__RetRes);

#ifdef __cplusplus
}
#endif

#endif

/* End of soapStub.h */
